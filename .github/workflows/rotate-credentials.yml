name: Rotate Azure Credentials

on:
  schedule:
    # Run daily at 2 AM UTC to check if rotation is needed
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger for testing
    inputs:
      force_rotation:
        description: 'Force rotation even if not near expiration'
        required: false
        type: boolean
        default: false

permissions:
  contents: write  # For committing Terraform state changes
  id-token: write  # For OIDC authentication

jobs:
  check-and-rotate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Check Secret Expiration
        id: check-expiration
        run: |
          # Parse current credentials
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
          
          # Get service principal object ID
          SP_OBJECT_ID=$(az ad sp show --id $CLIENT_ID --query id -o tsv)
          
          # Get password end date
          END_DATE=$(az ad sp credential list --id $SP_OBJECT_ID --query "[0].endDateTime" -o tsv)
          
          # Convert to epoch
          END_EPOCH=$(date -d "$END_DATE" +%s)
          NOW_EPOCH=$(date +%s)
          
          # Calculate days until expiration
          SECONDS_UNTIL_EXPIRY=$((END_EPOCH - NOW_EPOCH))
          DAYS_UNTIL_EXPIRY=$((SECONDS_UNTIL_EXPIRY / 86400))
          
          echo "Days until expiration: $DAYS_UNTIL_EXPIRY"
          echo "days_until_expiry=$DAYS_UNTIL_EXPIRY" >> $GITHUB_OUTPUT
          
          # Determine if rotation is needed (10 days before expiration)
          if [ $DAYS_UNTIL_EXPIRY -le 10 ] || [ "${{ github.event.inputs.force_rotation }}" == "true" ]; then
            echo "needs_rotation=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Secret will expire in $DAYS_UNTIL_EXPIRY days - rotation needed!"
          else
            echo "needs_rotation=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Secret is valid for $DAYS_UNTIL_EXPIRY more days - no rotation needed"
          fi

      - name: Rotate Service Principal Secret
        if: steps.check-expiration.outputs.needs_rotation == 'true'
        id: rotate
        run: |
          cd infrastructure
          
          # Initialize Terraform
          terraform init
          
          # Taint the service principal password to force recreation
          terraform taint azuread_service_principal_password.github_actions
          
          # Apply to create new password (keeps old one valid during rotation!)
          terraform apply -auto-approve -var-file=dev.tfvars
          
          # Get new credentials
          NEW_CREDENTIALS=$(terraform output -raw azure_credentials_json)
          
          # Save to temporary file (encrypted in runner)
          echo "$NEW_CREDENTIALS" > /tmp/new_credentials.json
          
          echo "‚úÖ New service principal password created!"
          echo "rotation_complete=true" >> $GITHUB_OUTPUT

      - name: Update GitHub Secret
        if: steps.rotate.outputs.rotation_complete == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read new credentials
          NEW_CREDENTIALS=$(cat /tmp/new_credentials.json)
          
          # Update GitHub secret using GitHub CLI
          echo "$NEW_CREDENTIALS" | gh secret set AZURE_CREDENTIALS --repo ${{ github.repository }}
          
          echo "‚úÖ GitHub secret AZURE_CREDENTIALS updated!"

      - name: Verify New Credentials
        if: steps.rotate.outputs.rotation_complete == 'true'
        run: |
          # Logout current session
          az logout
          
          # Login with new credentials
          NEW_CREDENTIALS=$(cat /tmp/new_credentials.json)
          echo "$NEW_CREDENTIALS" > /tmp/creds.json
          az login --service-principal \
            -u $(echo "$NEW_CREDENTIALS" | jq -r '.clientId') \
            -p $(echo "$NEW_CREDENTIALS" | jq -r '.clientSecret') \
            --tenant $(echo "$NEW_CREDENTIALS" | jq -r '.tenantId')
          
          # Test access
          az account show
          
          echo "‚úÖ New credentials verified successfully!"
          
          # Cleanup
          rm /tmp/new_credentials.json /tmp/creds.json

      - name: Cleanup Old Password (After Grace Period)
        if: steps.rotate.outputs.rotation_complete == 'true'
        run: |
          echo "‚è≥ Old password will remain valid for 24 hours for zero-downtime transition"
          echo "Next scheduled run will clean up expired passwords"
          
          # Note: Terraform will automatically remove expired passwords
          # on next apply. The old password remains valid for 24 hours
          # to ensure zero downtime during credential propagation.

      - name: Send Notification
        if: steps.rotate.outputs.rotation_complete == 'true'
        run: |
          echo "üìß Rotation Complete!"
          echo "- New service principal password created"
          echo "- GitHub secret AZURE_CREDENTIALS updated"
          echo "- Old password remains valid for 24 hours"
          echo "- Zero downtime ensured"

      - name: No Rotation Needed
        if: steps.check-expiration.outputs.needs_rotation == 'false'
        run: |
          echo "‚úÖ No rotation needed. Secret is valid for ${{ steps.check-expiration.outputs.days_until_expiry }} more days"
