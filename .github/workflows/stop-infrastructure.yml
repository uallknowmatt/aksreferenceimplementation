name: Stop Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to stop'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  stop-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Resource Names
        id: resources
        run: |
          cd infrastructure/environments/${{ github.event.inputs.environment }}
          
          # Read location from terraform.tfvars
          LOCATION=$(grep '^location' terraform.tfvars | awk -F'"' '{print $2}')
          echo "LOCATION=$LOCATION" >> $GITHUB_OUTPUT
          
          # Map location to location code
          case "$LOCATION" in
            "eastus") LOCATION_CODE="eus" ;;
            "eastus2") LOCATION_CODE="eus2" ;;
            "westus") LOCATION_CODE="wus" ;;
            "westus2") LOCATION_CODE="wus2" ;;
            "centralus") LOCATION_CODE="cus" ;;
            *) LOCATION_CODE="eus2" ;;
          esac
          echo "LOCATION_CODE=$LOCATION_CODE" >> $GITHUB_OUTPUT
          
          # Resource names
          RG_NAME="rg-account-opening-${{ github.event.inputs.environment }}-${LOCATION_CODE}"
          AKS_NAME="aks-account-opening-${{ github.event.inputs.environment }}-${LOCATION_CODE}"
          POSTGRES_NAME="psql-account-opening-${{ github.event.inputs.environment }}-${LOCATION_CODE}"
          
          echo "RG_NAME=$RG_NAME" >> $GITHUB_OUTPUT
          echo "AKS_NAME=$AKS_NAME" >> $GITHUB_OUTPUT
          echo "POSTGRES_NAME=$POSTGRES_NAME" >> $GITHUB_OUTPUT

      - name: Check if AKS exists
        id: check-aks
        run: |
          if az aks show --name ${{ steps.resources.outputs.AKS_NAME }} --resource-group ${{ steps.resources.outputs.RG_NAME }} &> /dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ AKS cluster found: ${{ steps.resources.outputs.AKS_NAME }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ AKS cluster not found."
          fi

      - name: Stop AKS Cluster
        if: steps.check-aks.outputs.exists == 'true'
        run: |
          echo "🛑 Stopping AKS cluster: ${{ steps.resources.outputs.AKS_NAME }}..."
          az aks stop \
            --name ${{ steps.resources.outputs.AKS_NAME }} \
            --resource-group ${{ steps.resources.outputs.RG_NAME }}
          echo "✅ AKS cluster stopped successfully!"

      - name: Check if PostgreSQL exists
        id: check-postgres
        run: |
          if az postgres flexible-server show --name ${{ steps.resources.outputs.POSTGRES_NAME }} --resource-group ${{ steps.resources.outputs.RG_NAME }} &> /dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ PostgreSQL server found: ${{ steps.resources.outputs.POSTGRES_NAME }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ PostgreSQL server not found."
          fi

      - name: Stop PostgreSQL Server
        if: steps.check-postgres.outputs.exists == 'true'
        run: |
          echo "🛑 Stopping PostgreSQL server: ${{ steps.resources.outputs.POSTGRES_NAME }}..."
          az postgres flexible-server stop \
            --name ${{ steps.resources.outputs.POSTGRES_NAME }} \
            --resource-group ${{ steps.resources.outputs.RG_NAME }}
          echo "✅ PostgreSQL server stopped successfully!"

      - name: Calculate Cost Savings
        id: savings
        run: |
          # Approximate monthly costs when running 24/7
          AKS_COST=140  # Standard_D2s_v3 per month
          POSTGRES_COST=25  # B_Standard_B1ms per month
          TOTAL_COST=$(( AKS_COST + POSTGRES_COST ))
          
          # Daily cost
          DAILY_COST=$(echo "scale=2; $TOTAL_COST / 30" | bc)
          
          echo "daily_savings=$DAILY_COST" >> $GITHUB_OUTPUT
          echo "monthly_cost=$TOTAL_COST" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "## 💤 Infrastructure Stopped Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: ${{ steps.resources.outputs.RG_NAME }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-aks.outputs.exists }}" == "true" ]; then
            echo "- **AKS Cluster**: ✅ Stopped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **AKS Cluster**: ❌ Not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.check-postgres.outputs.exists }}" == "true" ]; then
            echo "- **PostgreSQL**: ✅ Stopped" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **PostgreSQL**: ❌ Not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💰 Cost Savings:" >> $GITHUB_STEP_SUMMARY
          echo "- **Daily savings**: ~\$5.50 USD" >> $GITHUB_STEP_SUMMARY
          echo "- **Monthly cost if running 24/7**: ~\$165 USD" >> $GITHUB_STEP_SUMMARY
          echo "- **Monthly cost if only running 8 hours/day**: ~\$55 USD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 To restart:" >> $GITHUB_STEP_SUMMARY
          echo "Run the **Start Infrastructure** workflow when you're ready to test again!" >> $GITHUB_STEP_SUMMARY
